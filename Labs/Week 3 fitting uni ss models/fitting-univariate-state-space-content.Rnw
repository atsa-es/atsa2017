\SweaveOpts{keep.source=TRUE, prefix.string=../figures/USS-, eps=FALSE, split=FALSE}
<<RUNFIRST, echo=FALSE, include.source=FALSE>>=
options(prompt=" ", continue=" ", width=60)
@

\chapter{Fitting univariate state-space models}
\label{chap:univariate state-space}
\chaptermark{Univariate state-space models}


This lab show you how to fit some basic univariate state-space models using MARSS(). This will also introduce you to the idea of writing AR models in state-space form.  Before running the code, load the required R packages:
<<>>=
library(MARSS)
library(stats)
library(forecast)
@


\section{Fitting a state-space model with MARSS}
The \verb@MARSS@ package fits multivariate auto-regressive models of this form:
\begin{equation}
\begin{gathered}
\xx_t = \BB \xx_{t-1}+\uu+\ww_t \text{ where } \ww_t \sim \N(0,\QQ) \\
\yy_t = \ZZ\xx_t+\aa+\vv_t \text{ where } \vv_t \sim \N(0,\RR) \\
\xx_0 = \mumu
\end{gathered}   
\label{eq:marss}
\end{equation}
To fit your time-series model with \verb@MARSS@ you need to put you model in that form.  The $\BB$, $\ZZ$, $\uu$, $\aa$, $\QQ$, $\RR$ and $\mumu$ are parameters that are (potentially) estimated. The $\yy$ are your data.  The $\xx$ are the hidden state(s).  Everything in bold is a matrix; if it is a small bolded letter, it is a matrix with 1 column.

{\it Important: in a state-space model, $\yy$ is always the data and $\xx$ is something estimated from the data.}

A basic \verb@MARSS()@ call looks like
\verb@fit=MARSS(y, model=list(...))@.
The \verb@model@ argument tells MARSS what the parameters look like.  The list has the elements with the names: \verb@B@, \verb@U@, \verb@Q@, \verb@Z@, \verb@A@, \verb@R@, \verb@x0@ ($\mumu$).  The names correspond to the parameters with the same names in Equation \ref{eq:marss} except that $\mumu$ is called \verb@x0@. \verb@tinitx@ indicates whether the initial $\xx$ is specified at $t=0$ so $\xx_0$ or $t=1$ so $\xx_1$.

Here's an example.  Let's say we want to fit a univariate AR-1 model observed with error. Here is that model:
\begin{equation}
\begin{gathered}
x_t = b x_{t-1} + w_t \text{ where } \ww_t \sim \N(0,q) \\
y_t = x_t+v_t \text{ where } v_t \sim \N(0,r) \\
x_0 = \mu
\end{gathered}   
\label{eq:ar1witherror}
\end{equation}

To fit this with \verb@MARSS()@, we need to write Equation \ref{eq:ar1witherror} as Equation \ref{eq:marss}.  Equation \ref{eq:marss} is in MATRIX form.  The \verb@MARSS()@ model list wants the parameters written EXACTLY like they would be written for Equation \ref{eq:marss}.  For example, \verb@1@ is the number 1 in R.  It is not a matrix:
<<bad.1>>=
class(1)
@
If you need a 1 (or 0) in your model, you need to pass in the parameter as a $1 \times 1$ matrix: \verb@matrix(1)@.

With that mind, our model list for Equation \ref{eq:ar1witherror} is:
<<mod.list>>=
mod.list=list(
B=matrix(1), U=matrix(0), Q=matrix("q"),
Z=matrix(1), A=matrix(0), R=matrix("r"),
x0=matrix("mu"), tinitx=0 )
@

We can simulate some AR-1 plus error data like so
<<marss1.fit>>=
q=0.1; r=0.1; n=100
y=cumsum(rnorm(n,0,sqrt(q)))+rnorm(n,0,sqrt(r))
@
And then fit with \verb@MARSS()@ using our \verb@mod.list@ above:
<<>>=
fit=MARSS(y,model=mod.list)
@

If we wanted to fix $q=0.1$, then $\QQ=[0.1]$ (a $1 \times 1$ matrix with 0.1). We just change \verb@mod.list$Q@ and re-fit:
<<mod.list.1, results=hide>>=
mod.list$Q=matrix(0.1)
fit=MARSS(y,model=mod.list)
@


\section{Examples using the Nile river data}

We will use the data from the Nile River (Figure \ref{fig:CS6.fig1}). We will fit different flow models to the data and compare the models with AIC.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<data>>=
library(datasets)
dat=as.vector(Nile)
@

\begin{figure}[htp]
\begin{center}
<<Cs01_plotdata, echo=FALSE, fig=TRUE>>=
plot(Nile,ylab="Flow volume",xlab="Year")
@
\end{center}
\caption{The Nile River flow volume 1871 to 1970 (included dataset in \R).}
\label{fig:CS6.fig1}
\end{figure}

\subsection{Flat level model}
We will start by modeling these data as a simple average river flow with variability around some level $\mu$.  
%~~~~~~~~~~~~~~~~~~~~~~~~~
\begin{equation}
y_t = \mu + v_t \text{ where } v_t \sim \N(0,r)    
 \label{eq:simple.model}\end{equation}
%~~~~~~~~~~~~~~~~~~~~~~~~~
where $y_t$ is the river flow volume at year $t$.

We can write this model as a univariate state-space model as follows. We use $x_t$ to model the average flow level.  $y_t$ is just an observation of this flat $x_t$.  Work through $x_1$, $x_2$, $\dots$ starting from $x_0$ to convince yourself that $x_t$ will always equal $\mu$.
%~~~~~~~~~~~~~~~~~~~~~~~~~
\begin{equation}
\begin{gathered}
x_t = 1 \times x_{t-1}+ 0 + w_t    \text{ where } w_t \sim \N(0,0) \\
y_t = 1 \times x_t + 0 + v_t \text{ where } v_t \sim \N(0,r)  \\
x_0 = \mu 
 \end{gathered}   
 \label{eq:marss.model.0}\end{equation}
%~~~~~~~~~~~~~~~~~~~~~~~~~
The model is specified as a list as follows:
<<Cs02_mod.nile.0, eval=TRUE>>=
mod.nile.0 = list( 
B=matrix(1), U=matrix(0), Q=matrix(0),
Z=matrix(1), A=matrix(0), R=matrix("r"),
x0=matrix("mu"), tinitx=0 )
@

We then fit the model with \verb@MARSS()@.  
<<Cs03_fit.data.0, eval=TRUE, results=hide>>=
kem.0 = MARSS(dat, model=mod.nile.0)
@
Output not shown, but here are the estimates and AICc.
<<>>=
c(coef(kem.0, type="vector"), LL=kem.0$logLik, AICc=kem.0$AICc)
@
\subsection{Linear trend in flow model}
Figure \ref{fig:CS6.fits} shows the fit for the flat average river flow model.  Looking at the data, we might expect that a declining average river flow would be better.  In MARSS form, that model would be:
%~~~~~~~~~~~~~~~~~~~~~~~~~
\begin{equation}
\begin{gathered}
x_t = 1 \times x_{t-1}+ u + w_t    \text{ where } w_t \sim \N(0,0) \\
y_t = 1 \times x_t + 0 + v_t \text{ where } v_t \sim \N(0,r)  \\
x_0 = \mu
\end{gathered}   
\label{eq:marss.model.1}\end{equation}
%~~~~~~~~~~~~~~~~~~~~~~~~~
where $u$ is now the average per-year decline in river flow volume.  The model is specified  as follows:
<<Cs04_mod.nile.1, eval=TRUE>>=
mod.nile.1 = list(
B=matrix(1), U=matrix("u"), Q=matrix(0),
Z=matrix(1), A=matrix(0), R=matrix("r"),
x0=matrix("mu"), tinitx=0 )
@

We then fit the model with \verb@MARSS()@:
<<Cs05_fit.data.1, eval=TRUE, results=hide>>=
kem.1 = MARSS(dat, model=mod.nile.1)
@
Here are the estimates, log-likelihood and AICc:
<<Cs05_fit.data.1.coef, eval=TRUE>>=
c(coef(kem.1, type="vector"), LL=kem.1$logLik, AICc=kem.1$AICc)
@
Figure \ref{fig:CS6.fits} shows the fits for the two models with deterministic models (flat and declining) for mean river flow along with their AICc values (smaller AICc is better).    The AICc for the model with a declining river flow is lower by over 20 (which is a lot).

\subsection{Stochastic level model}
Looking at the flow levels, we might suspect that a model that allows the average flow to change would model the data better and we might suspect that there have been sudden, and anomalous, changes in the river flow level.
We will now model the average river flow at year $t$ as a random walk, specifically an autoregressive process which means that average river flow is year $t$ is a function of average river flow in year $t-1$.  
%~~~~~~~~~~~~~~~~~~~~~~~~~
\begin{equation}
\begin{gathered}
x_t = x_{t-1}+w_t \text{ where } w_t \sim \N(0,q) \\
y_t = x_t+v_t \text{ where } v_t \sim \N(0,r)  \\
x_0 = \mu
\end{gathered}   
\label{eq:random.walk.w.noise}\end{equation}
%~~~~~~~~~~~~~~~~~~~~~~~~~
As before, $y_t$ is the river flow volume at year $t$. $x_t$ is the mean level.
The model is specified as:
<<Cs06_mod.nile.2, eval=TRUE>>=
mod.nile.2 = list(
B=matrix(1), U=matrix(0), Q=matrix("q"),
Z=matrix(1), A=matrix(0), R=matrix("r"),
x0=matrix("mu"), tinitx=0 )
@
We could also use the text shortcuts to specify the model.  Because $\RR$ and $\QQ$ are $1 \times 1$ matrices, ``unconstrained'', ``diagonal and unequal``, ``diagonal and equal'' and ``equalvarcov'' will all lead to a $1 \times 1$ matrix with one estimated element.  For $\aa$ and $\uu$, the following shortcut could be used:
<<mod.nile.not.used, eval=FALSE>>=
A=U="zero"
@
Because $\xx_0$ is $1 \times 1$, it could be specified as ``unequal'', ``equal'' or ``unconstrained''.

<<Cs07_fit.data.2, eval=TRUE, results=hide>>=
kem.2 = MARSS(dat, model=mod.nile.2)
@
Here are the estimates, log-likelihood and AICc:
<<Cs05_fit.data.2.coef, eval=TRUE>>=
c(coef(kem.2, type="vector"), LL=kem.2$logLik, AICc=kem.2$AICc)
@

\subsection{Stochastic level model with drift}
We can add a drift to term to our random walk; the $u$ in the process model ($x$) is the drift term.  This causes the random walk to tend to trend up or down.  

%~~~~~~~~~~~~~~~~~~~~~~~~~
\begin{equation}
\begin{gathered}
x_t = x_{t-1}+u+w_t \text{ where } w_t \sim \N(0,q) \\
y_t = x_t+v_t \text{ where } v_t \sim \N(0,r)  \\
x_0 = \mu
\end{gathered}   
\label{eq:random.walk.w.noise.w.drift}
\end{equation}
%~~~~~~~~~~~~~~~~~~~~~~~~~
The model is then specified by changing \verb@U@ to indicate that a $u$ is estimated:
<<Cs06_mod.nile.3, eval=TRUE>>=
mod.nile.3 = list(
B=matrix(1), U=matrix("u"), Q=matrix("q"),
Z=matrix(1), A=matrix(0), R=matrix("r"),
x0=matrix("mu"), tinitx=0)
@
<<Cs07_fit.data.3, eval=TRUE, results=hide>>=
kem.3 = MARSS(dat, model=mod.nile.3)
@
Here are the estimates, log-likelihood and AICc:
<<Cs05_fit.data.3.coef, eval=TRUE>>=
c(coef(kem.3, type="vector"), LL=kem.3$logLik, AICc=kem.3$AICc)
@

Figure \ref{fig:CS6.fits} shows all the models along with their AICc values. 

\section{The StructTS function}
The \verb@StructTS@ function in R will also fit the stochastic level model:
<<Cs07_fit.data.2.structTS, eval=TRUE>>=
fit.sts = StructTS(dat, type="level")
fit.sts
@
The estimates from \verb@StructTS()@ will be different (though similar) from \verb@MARSS()@ because \verb@StructTS()@ uses $x_1 = y_1$, that is the hidden state at $t=1$ is fixed to be the data at $t=1$.  That is fine if you have a long data set, but would be disastrous for the short data sets typical in fisheries and ecology.  

\verb@StructTS()@ is much, much faster for long time series.  The example in \verb@?StructTS@ is pretty much instantaneous with \verb@StructTS()@ but takes minutes with the EM algorithm that is the default in \verb@MARSS()@.  With the BFGS algorithm, it is much closer to \verb@StructTS()@:
<<Cs07_fit.data.2.comp, eval=FALSE>>=
trees <- window(treering, start = 0)
fitts = StructTS(trees, type = "level")
fitem = MARSS(as.vector(trees),mod.nile.2)
fitbf = MARSS(as.vector(trees),mod.nile.2, method="BFGS")
@
Note that \verb@mod.nile.2@ specifies a univariate stochastic level model so we can use it just fine with other univariate data sets.

In addition, \verb@fitted(fit.sts)@ where \verb@fit.sts@ is a fit from \verb@StructTS()@ is very different than \verb@fit.marss$states@ from \verb@MARSS()@. 
<<Cs07_fit.data.2.fitted.structTS, eval=TRUE>>=
t=10
fitted(fit.sts)[t]
@
is the expected value of $y_{t+1}$ (in this case $y_{11}$ since we set $t=10$) given the data up to $y_t$ (in this case, up to $y_{10}$).  It is called the one-step ahead prediction.  
We are not going to use the one-step ahead predictions unless we are forecasting or doing cross-validation.  

Typically, when we analyze fisheries and ecological data, we want to know the estimate of the state, the $x_t$, given ALL the data.  For example, we might need an estimate of the population size in year 1990 given a time series of counts from 1930 to 2015.  We don't want to use only the data up to 1989; we want to use all the information.  \verb@fit.marss$states@ from \verb@MARSS()@ is the expected value of $x_t$ given all the data.  For the stochastic level model, that is equal to the expected value of $y_t$ given all the data except $y_t$.

If you needed the one-step predictions from \verb@MARSS@, you can get them from the Kalman filter output:
<<Cs07_fit.data.2.one.step.ahead, eval=TRUE, results=hide>>=
kf=print(kem.2, what="kfs")
kf$xtt1[1,t]
@
\verb@kfs@ means Kalman filter/smoother and passing in \verb@what="kfs"@ is saying to return the Kalman filter/smoother output.  The expected value of $x_t$ conditioned on $y_1$ to $y_{t-1}$ is in \verb@xtt1@ of that output.  The expected value of $x_t$ conditioned on all the data is in \verb@xtT@.

\begin{figure}[htp]
\begin{center}
<<Cs08_plotfit, eval=TRUE, echo=FALSE, fig=TRUE, width=5, height=6>>=
library(Hmisc)
par(mfrow=c(4,1), mar=c(4,4,0.5,0.5), oma=c(1,1,1,1))
x=seq(tsp(Nile)[1],tsp(Nile)[2],tsp(Nile)[3])
#model 0
plot(Nile,ylab="Flow volume",xlab="",xaxp=c(1870,1970,10),bty="L")
minor.tick(nx=10,ny=0,tick.ratio=.3)
kem=kem.0 #model 0 results
lines(x,kem$states[1,],col="red",lwd=2)
legend("topright", paste("model 0, AICc=",format(kem.0$AICc,digits=1)), bty="n")

#model 1
plot(Nile,ylab="Flow volume",xlab="",xaxp=c(1870,1970,10),bty="n")
minor.tick(nx=10,ny=0,tick.ratio=.3)
kem=kem.1 #model 1 results
lines(x,kem$states[1,],col="red",lwd=2)
legend("topright", paste("model 1, AICc=",format(kem.1$AICc,digits=1)),bty="n")

#model 2
plot(Nile,ylab="Flow volume",xlab="",xaxp=c(1870,1970,10),bty="L")
minor.tick(nx=10,ny=0,tick.ratio=.3)
kem=kem.2 #model 2 results
lines(x,kem$states[1,],col="red",lwd=2)
lines(1871:1970,kem$states[1,]-1.96*kem$states.se[1,],col="red",lty=2)
lines(1871:1970,kem$states[1,]+1.96*kem$states.se[1,],col="red",lty=2)
legend("topright", paste("model 2, AICc=",format(kem$AICc,digits=1)),bty="n")

#model 3
plot(Nile,ylab="Flow volume",xlab="",xaxp=c(1870,1970,10),bty="L")
minor.tick(nx=10,ny=0,tick.ratio=.3)
kem=kem.3 #model 2 results
lines(x,kem$states[1,],col="red",lwd=2)
lines(1871:1970,kem$states[1,]-1.96*kem$states.se[1,],col="red",lty=2)
lines(1871:1970,kem$states[1,]+1.96*kem$states.se[1,],col="red",lty=2)
legend("topright", paste("model 3, AICc=",format(kem$AICc,digits=1)),bty="n")
@
\end{center}
\caption{The Nile River flow volume with the model estimated flow rates (solid lines).  The bottom model is a stochastic level model, meaning there isn't one level line.  Rather the level line is a distribution that has a mean and standard deviation.  The solid state line in the bottom plots is the mean of the stochastic level and the 2 standard deviations are shown.  The other two models are deterministic level models so the state is not stochastic and does not have a standard deviation.}
\label{fig:CS6.fits}
\end{figure}


\section{Comparing models with AIC and model weights}

To get the AIC or AICc values for a model fit from a MARSS fit, use \verb@fit$AIC@ or \verb@fit$AICc@.  The log-likelihood is in \verb@fit$logLik@ and the number of estimated parameters in \verb@fit$num.params@.  For fits from other functions, try \verb@AIC(fit)@ or look at the function documentation.

Let's put the AICc values 3 Nile models together:
<<nile.aics>>=
nile.aic = c(kem.0$AICc, kem.1$AICc, kem.2$AICc, kem.3$AICc)
@
Then we calculate the AICc minus the minus AICc in our model set and compute the model weights.  $\Delta\text{AIC}$ is the AIC values minus the minimum AIC value in your model set.

<<nile.delaic>>=
delAIC= nile.aic-min(nile.aic)
relLik=exp(-0.5*delAIC)
aicweight=relLik/sum(relLik)
@
And this leads to our model weights table:
<<aic.table>>=
aic.table=data.frame(
AICc=nile.aic, 
delAIC=delAIC, 
relLik=relLik, 
weight=aicweight)
rownames(aic.table)=c("flat level","linear trend", "stoc level", "stoc level w drift")
@
Here the table is printed using \verb@round()@ to limit the number of digits shown.
<<aic.table.round>>=
round(aic.table, digits=3)
@

One thing to keep in mind when comparing models within a set of models is that the model set needs to include at least one model that can fit the data reasonably well.  `Reasonably well' means the model can put a fitted line through the data.  Can't all models do that?  Definitely, not.  For example, the flat-level model cannot put a fitted line through the Nile River data.  It is simply impossible.  The straight trend model also cannot put a fitted line through the flow data.  So if our model set only included flat-level and straight trend, then we might have said that the straight trend model is `best' even though it is just the better of two bad models.

\section{Basic diagnostics}

The first diagnostic that you do with any statistical analysis is check that your residuals correspond to your assumed error structure.  We have two types of errors in a univariate state-space model: process errors, the $w_t$, and observation errors, the $v_t$.  
They should not have a temporal trend.  To get the residuals from most types of fits in R, you can use \verb@residuals(fit)@.  \verb@MARSS@ calls the $v_t$, model residuals, and the $w_t$ state residuals.  We can plot these using the following code (Figure \ref{fig:resids}).
<<resids.0>>=
par(mfrow=c(1,2))
resids=residuals(kem.0)
plot(resids$model.residuals[1,], 
   ylab="model residual", xlab="", main="flat level")
abline(h=0)
plot(resids$state.residuals[1,], 
   ylab="state residual", xlab="", main="flat level")
abline(h=0)
@

\begin{figure}[htp]
\begin{center}
<<Cs01_resids, echo=FALSE, fig=TRUE>>=
par(mfrow=c(3,2))
resids=residuals(kem.0)
plot(resids$model.residuals[1,], 
   ylab="model residual", xlab="", main="flat level")
abline(h=0)
plot(resids$state.residuals[1,], 
   ylab="state residual", xlab="", main="flat level")
abline(h=0)

resids=residuals(kem.1)
plot(resids$model.residuals[1,], ylab="model residual", xlab="", main="linear trend")
abline(h=0)
plot(resids$state.residuals[1,], ylab="state residual", xlab="", main="linear trend", ylim=c(-1,1))
abline(h=0)

resids=residuals(kem.2)
plot(resids$model.residuals[1,], ylab="model residual", xlab="", main="stoc level")
abline(h=0)
plot(resids$state.residuals[1,], ylab="state residual", xlab="", main="stoc level")
abline(h=0)
@
\end{center}
\caption{The model and state residuals for the first 3 models.}
\label{fig:resids}
\end{figure}

The residuals should also not be autocorrelated in time.  We can check the autocorrelation with \verb@acf@.  We won't do this for the state residuals for the flat level or linear trends since for those models $w_t=0$.  The acf's are shown in Figure \ref{fig:acfs}.  The stochastic level model looks the best in that its model residuals (the $v_t$) are fine but the state model still has problems.  Clearly the state is not a simple random walk.  This is not surprising.  The Aswan Low Dam was completed in 1902 and changed the mean flow.  The Aswan High Dam was completed in 1970 and also affected the flow.  You can see these perturbations in Figure \ref{fig:CS6.fig1}.

<<acf.0>>=
par(mfrow=c(2,2))
resids=residuals(kem.0)
acf(resids$model.residuals[1,], main="flat level v(t)")
resids=residuals(kem.1)
acf(resids$model.residuals[1,], main="linear trend v(t)")
resids=residuals(kem.2)
acf(resids$model.residuals[1,], main="stoc level v(t)")
acf(resids$state.residuals[1,], main="stoc level w(t)")
@

\begin{figure}[htp]
\begin{center}
<<Cs01_acfs, echo=FALSE, fig=TRUE>>=
par(mfrow=c(2,2))
resids=residuals(kem.0)
acf(resids$model.residuals[1,], main="flat level v(t)")
resids=residuals(kem.1)
acf(resids$model.residuals[1,], main="linear trend v(t)")
resids=residuals(kem.2)
acf(resids$model.residuals[1,], main="stoc level v(t)")
acf(resids$state.residuals[1,], main="stoc level w(t)")
@
\end{center}
\caption{The model and state residual acfs for the 3 models.}
\label{fig:acfs}
\end{figure}

\clearpage

\section{Fitting a univariate AR-1 state-space model with JAGS*}

Here we show how to fit model 3, Equation \ref{eq:random.walk.w.noise.w.drift}, with JAGS.
First load the required packages:
<<jags-packages>>=
library(coda)
library(R2jags)
@
Next write the model for JAGS to a file (filename in \verb@model.loc@):
<<jags-model>>=
model.loc="ss_model.txt"
jagsscript = cat("
   model {  
   # priors on parameters
   mu ~ dnorm(Y1, 1/(Y1*100)); # normal mean = 0, sd = 1/sqrt(0.01)
   tau.q ~ dgamma(0.001,0.001); # This is inverse gamma
   sd.q <- 1/sqrt(tau.q); # sd is treated as derived parameter
   tau.r ~ dgamma(0.001,0.001); # This is inverse gamma
   sd.r <- 1/sqrt(tau.r); # sd is treated as derived parameter
   u ~ dnorm(0, 0.01);
    
   # Because init X is specified at t=0
   X0 <- mu
   X[1] ~ dnorm(X0+u,tau.q);
   Y[1] ~ dnorm(X[1], tau.r);
 
   for(i in 2:N) {
   predX[i] <- X[i-1]+u; 
   X[i] ~ dnorm(predX[i],tau.q); # Process variation
   Y[i] ~ dnorm(X[i], tau.r); # Observation variation
   }
   }                  
   ",file=model.loc)
@
Next we specify the data (and any other input) that the JAGS code needs.  In this case, we need to pass in \verb@dat@ and the number of time steps since that is used in the for loop.  We also specify the parameters that we want to monitor.  We need to specify at least one, but we will monitor all of them so we can plot them after fitting.  Note, that the hidden state is a parameter in the Bayesian context (but not in the maximum likelihood context).  
<<jags-set>>=
jags.data = list("Y"=dat, "N"=length(dat), Y1=dat[1])
jags.params=c("sd.q","sd.r","X","mu", "u")
@
Now we can fit the model:
<<jags-fit, results=hide>>=
mod_ss = jags(jags.data, parameters.to.save=jags.params, 
     model.file=model.loc, n.chains = 3, 
     n.burnin=5000, n.thin=1, n.iter=10000, DIC=TRUE)
@

We can then show the posteriors with the MLEs from MARSS on top:
\begin{figure}[htp]
\begin{center}
<<fig-posteriors, echo=TRUE, fig=TRUE>>=
attach.jags(mod_ss)
par(mfrow=c(2,2))
hist(mu)
abline(v=coef(kem.3)$x0, col="red")
hist(u)
abline(v=coef(kem.3)$U, col="red")
hist(log(sd.q^2))
abline(v=log(coef(kem.3)$Q), col="red")
hist(log(sd.r^2))
abline(v=log(coef(kem.3)$R), col="red")
detach.jags()
@
\end{center}
\caption{The posteriors for model 3 with MLE estimates from MARSS shown in red.}
\label{fig:posteriors}
\end{figure}

To plot the estimated states, we write a helper function:
<<jags-plot-states-fun>>=
plotModelOutput = function(jagsmodel, Y) {
  attach.jags(jagsmodel)
  x = seq(1,length(Y))
  XPred = cbind(apply(X,2,quantile,0.025), apply(X,2,mean), apply(X,2,quantile,0.975))
  ylims = c(min(c(Y,XPred), na.rm=TRUE), max(c(Y,XPred), na.rm=TRUE))
  plot(Y, col="white",ylim=ylims, xlab="",ylab="State predictions")
  polygon(c(x,rev(x)), c(XPred[,1], rev(XPred[,3])), col="grey70",border=NA)
  lines(XPred[,2])
  points(Y)
}
@
\begin{figure}[htp]
\begin{center}
<<fig-bayesian-states, echo=TRUE, fig=TRUE>>=
plotModelOutput(mod_ss, dat)
lines(kem.3$states[1,], col="red")
lines(1.96*kem.3$states.se[1,]+kem.3$states[1,], col="red", lty=2)
lines(-1.96*kem.3$states.se[1,]+kem.3$states[1,], col="red", lty=2)
title("State estimate and data from\nJAGS (black) versus MARSS (red)")
@
\end{center}
\caption{The estimated states from the Bayesian fit along with 95\% credible intervals (black and grey) with the MLE states and 95\% condidence intervals in red.}
\label{fig:bayesian-states}
\end{figure}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{A simple random walk model of animal movement}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
A simple random walk model of movement with drift (directional movement) but no correlation is 
\begin{gather}
x_{1,t} = x_{1,t-1} + u_1 + w_{1,t}, \;\; w_{1,t} \sim \N(0,\sigma^2_1)\\
x_{2,t} = x_{2,t-1} + u_2 + w_{2,t}, \;\; w_{2,t} \sim \N(0,\sigma^2_2)
\label{eq:movement}
\end{gather}
where $x_{1,t}$ is the location at time $t$ along one axis (here, longitude) and $x_{2,t}$ is for another, generally orthogonal, axis (in here, latitude).   The parameter $u_1$ is the rate of longitudinal movement and $u_2$ is the rate of latitudinal movement. We add errors to our observations of location:
\begin{gather}
y_{1,t} = x_{1,t} + v_{1,t}, \;\; v_{1,t} \sim \N(0,\eta^2_1)\\
y_{2,t} = x_{2,t} + v_{2,t}, \;\; v_{2,t} \sim \N(0,\eta^2_2),
\label{eq:observe}
\end{gather}

This model is  comprised of two separate univariate state-space models.  Note that $y_1$ depends only on $x_1$ and $y_2$ depends only on $x_2$.  There are no actual interactions between these two univariate models.  However, we can write the model down in the form of a multivariate model using diagonal variance-covariance matrices and a diagonal design ($\ZZ$) matrix.  Because the variance-covariance matrices and $\ZZ$ are diagonal, the $x_1$:$y_1$ and $x_2$:$y_2$ processes will be independent as intended.  Here are Equations \ref{eq:movement} and \ref{eq:observe} written as a MARSS model (in matrix form):
\begin{gather}
\begin{bmatrix}x_{1,t}\\x_{2,t}\end{bmatrix}
= \begin{bmatrix}x_{1,t-1}\\x_{2,t-1}\end{bmatrix}
+ \begin{bmatrix}u_1\\u_2\end{bmatrix}
+ \begin{bmatrix}w_{1,t}\\w_{2,t}\end{bmatrix},
 \textrm{ } \ww_t \sim \MVN\begin{pmatrix}0,\begin{bmatrix}\sigma^2_1&0\\0&\sigma^2_2\end{bmatrix} \end{pmatrix}  \label{eq:mssmlong.a} \\
\nonumber \\
\begin{bmatrix}y_{1,t}\\y_{2,t}\end{bmatrix}
= \begin{bmatrix}1&0\\0&1\end{bmatrix}
\begin{bmatrix}x_{1,t}\\x_{2,t}\end{bmatrix}
+ \begin{bmatrix}v_{1,t}\\ v_{2,t}\end{bmatrix},
 \textrm{ } \vv_t \sim \MVN\begin{pmatrix}0,\begin{bmatrix}\eta^2_1&0\\0&\eta^2_2\end{bmatrix} \end{pmatrix}  \label{eq:mssmlong.b}
\end{gather}
The variance-covariance matrix for $\ww_t$ is a diagonal matrix with unequal variances, $\sigma^2_1$ and $\sigma^2_2$. The variance-covariance matrix for $\vv_t$ is a diagonal matrix with unequal variances,  $\eta^2_1$ and $\eta^2_2$. We can write this succinctly as
\begin{gather}
\xx_t = \xx_{t-1} + \uu + \ww_t, \;\; \ww_t \sim \MVN(0,\QQ) \\
\yy_t = \xx_{t} + \vv_t, \;\; \vv_t \sim \MVN(0,\RR). 
\label{eq:mssm}
\end{gather}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\clearpage
\renewcommand{\rightmark}{}
\section*{Problems}
\addcontentsline{toc}{section}{Problems}
\begin{hwenumerate}

\item\label{hw-arima-defs} Write the equations for each of these models: ARIMA(0,0,0), ARIMA(0,1,0), ARIMA(1,0,0), ARIMA(0,0,1), ARIMA(1,0,1).  Read the help file for \verb@Arima@ (forecast package) if you are fuzzy on the arima notation.

\item\label{hw-uniss-1} The MARSS package includes a data set of sharp-tailed grouse in Washington.  Load the data to use as follows:

<<hw1, results=hide>>=
library(MARSS)
dat=log(grouse[,2])
@

Consider these two models for the data:

\begin{description}
\item[Model 1] random walk with no drift observed with no error
\item[Model 2] random walk with drift observed with no error
\end{description}

Written as a univariate state-space model, model 1 is
%~~~~~~~~~~~~~~~~~~~~~~~~~
\begin{equation}
\begin{gathered}
x_t = x_{t-1}+w_t \text{ where } w_t \sim \N(0,q)\\
x_0 = a \\
y_t = x_t 
\end{gathered}   
\label{eq:hw2.1}
\end{equation}
%~~~~~~~~~~~~~~~~~~~~~~~~~
Model 2 is almost identical except with $u$ added
%~~~~~~~~~~~~~~~~~~~~~~~~~
\begin{equation}
\begin{gathered}
x_t = x_{t-1}+u+w_t \text{ where } w_t \sim \N(0,q)\\
x_0 = a \\
y_t = x_t 
\end{gathered}   
\label{eq:hw2.2}
\end{equation}
%~~~~~~~~~~~~~~~~~~~~~~~~~
$y$ is the log grouse count in year $t$. 

\begin{enumerate}[label=\alph*)]
\item Plot the data. The year is in column 1 of \verb@grouse@.
\item Fit each model using \verb@MARSS()@.
\item Which one appears better supported given AICc?
\item Load the \verb@forecast@ package. Use \verb@?auto.arima@ to learn what it does.  Then use \verb@auto.arima(dat)@  to fit the data.  Next run \verb@auto.arima@ on the data with \verb@trace=TRUE@ to see all the ARIMA models it compared. Note, ARIMA(0,1,0) is a random walk with b=1.  ARIMA(0,1,0) with drift would be a random walk (b=1) with drift (with $u$).   
\item Is the difference in the AICc values between a random walk with and without drift comparable between MARSS() and auto.arima()?
\end{enumerate}

Note when using \verb@auto.arima@, it will fit AR-1 models of the following form (notice the $b$): $x_t = b x_{t-1}+w_t$.  \verb@auto.arima@ refers this model $x_t = x_{t-1}+w_t$, which is also AR-1 but with $b=1$, as ARIMA(0,1,0).  This says that the first difference of the data (that's the 1 in the middle) is a ARMA(0,0) process (the 0s in the 1st and 3rd spots).  So ARIMA(0,1,0) means this: $x_t - x_{t-1} = w_t$.  

\item\label{hw-uniss-2} Create a random walk with drift time series using the following command:
<<hw3.data>>=
dat=cumsum(rnorm(100,0.1,1))
@
Use \verb@?rnorm@ to make sure you know what the arguments to \verb@rnorm@ are.

\begin{enumerate}[label=\alph*)]
\item Write out the equation for that random walk as a univariate state-space model. 
\item What is the order of this random walk written as ARIMA(p, d, q)? "what is the order" means "what is $p$, $d$, and $q$. Model "order" is how \verb@arima@ and \verb@Arima@ specify arima models.
\item Fit that model using \verb@Arima()@ in the \verb@forecast@ package.  You'll need to specify the \verb@order@ and \verb@include.drift@ term.  Use \verb@?Arima@ to review what that function does if needed.
\item Fit that model with \verb@MARSS()@.
\item How are the two estimates different?
\end{enumerate}

Now fit the first-differenced data:

<<hw3.data>>=
diff.dat=diff(dat)
@

Use \verb@?diff@ to check what the \verb@diff@ function does.

\begin{enumerate}[resume]
\item If $x_t$ denotes a time series.  What is the first difference of $x$?  What is the second difference?
\item What is the $\xx$ model for \verb@diff.dat@?  Look at your answer to part (a) and the answer to part (e).
\item Fit \verb@diff.dat@ using \verb@Arima()@. You'll need to change \verb@order@ and \verb@include.mean@.
\item Fit that model with \verb@MARSS()@.
\end{enumerate}
If you've done this right, the estimated parameters using \verb@Arima@ and \verb@MARSS@ will now be the same.

This question should clue you into the fact that \verb@Arima@ is not exactly fitting Equation \ref{eq:marss}.  It's very similar, but not quite written that way.  By the way, Equation \ref{eq:marss} is how structural time series observed with error are written (state-space models). To recover the estimates that a function like \verb@arima@ or \verb@Arima@ returns,  you need to write your state-space model in a specific way (as seen above).

\item\label{hw-uniss-3}  \verb@Arima()@ will also fit what it calls an `AR-1 with drift'.  An AR-1 with drift is NOT this model: 
%~~~~~~~~~~~~~~~~~~~~~~~~~
\begin{equation}
x_t = b x_{t-1}+u+w_t \text{ where } w_t \sim \N(0,q)  
\label{eq:gompertz}\end{equation}
%~~~~~~~~~~~~~~~~~~~~~~~~~
The population dynamics literature, this equation is called the Gompertz model and is a type of density-dependent population model.

\begin{enumerate}[label=\alph*)]
\item Write R code to simulate Equation \ref{eq:gompertz}.  Make $b$ less than 1 and greater than 0.  Set $u$ and $x_0$ to whatever you want.  You can use a \verb@for@ loop.  
\item Plot the trajectories and show that this model does not ``drift'' upward or downward.  It fluctuates about a mean value.
\item Hold $b$ constant and change $u$.  How do the trajectories change?
\item Hold $u$ constant and change $b$.  Make sure to use a $b$ close to 1 and another close to 0. How do the trajectories change?
\item Do 2 simulations each with the same $w_t$.  In one simulation, set $u=1$ and in the other $u=2$.  For both simulations, set $x_1 = u/(1-b)$.  You can set $b$ to whatever you want as long as $0<b<1$.  Plot the 2 trajectories on the same plot.  What is different?
\end{enumerate}

We will fit what \verb@Arima@ calls ``AR-1 with drift'' models in the chapter on MARSS models with covariates.  

\item\label{hw-uniss-4} The MARSS package includes a data set of gray whales.  Load the data to use as follows:

<<hw4, results=hide>>=
library(MARSS)
dat=log(graywhales[,2])
@

Fit a random walk with drift model observed with error to the data:
%~~~~~~~~~~~~~~~~~~~~~~~~~
\begin{equation}
\begin{gathered}
x_t = x_{t-1}+u+w_t \text{ where } w_t \sim \N(0,q) \\
y_t = x_t+v_t \text{ where } v_t \sim \N(0,r) \\
x_0 = a 
\end{gathered}   
\label{eq:marss.rw.w.drift}\end{equation}
%~~~~~~~~~~~~~~~~~~~~~~~~~
$y$ is the whale count in year $t$. $x$ is interpreted as the 'true' unknown population size that we are trying to estimate.

\begin{enumerate}[label=\alph*)]
\item Fit this model with \verb@MARSS()@
\item Plot the estimated $x$ as a line with the actual counts added as points.  $x$ is in \verb@fit$states@.  It is a matrix, which \verb@plot@ will not like so you will need to change it to a vector using \verb@as.vector()@ or \verb@fit$states[1,]@
\item Simulate 1000 sample gray whale populstion trajectories (the $x$ in your model) using the estimated $u$ and $q$ starting at the estimated $x$ in 1997.  You can do this with a couple \verb@for@ loops or write something terse with \verb@cumsum@ and \verb@apply@.
\item Using these simulated trajectories, what is your estimate of the probability that the grey whale population will be above 50,000 graywhales in 2007?
\item What kind(s) of uncertainty does your estimate above NOT include?
\end{enumerate}

\item\label{hw-uniss-5} Fit the following models to the graywhales data using MARSS().  Assume $b=1$. 

\begin{description}
\item[Model 1] Process error only model with drift
\item[Model 2] Process error only model without drift
\item[Model 3] Process error with drift and observation error with observation error variance fixed = 0.05. 
\item[Model 4] Process error with drift and observation error with observation error variance estimated. 
\end{description}

\begin{enumerate}[label=\alph*)]
\item Compute the AICc's for each model and likelihood or deviance (-2 * log likelihood).  Where to find these? Try \verb@names(fit)@.  \verb@logLik()@ is the standard R function to return log-likelihood from fits.
\item Calculate a table of $\Delta\text{AICc}$ values and AICc weights. 
\item Show the acf of the model and state residuals for the best model. You will need a vector of the residuals to do this. If \verb@fit@ is the fit from a fit call like \verb@fit = MARSS(dat)@, you get the residuals using this code:
<<r hw-greywhales, eval=FALSE>>=
residuals(fit)$state.residuals[1,]
residuals(fit)$model.residuals[1,]
@
Do the acf's suggest any problems?
\end{enumerate}

\item\label{hw-uniss-6} Evaluate the predictive accuracy of forecasts using the \verb@forecast@ package using the 'airmiles' dataset.
Load the data to use as follows:

<<hw6, results=hide>>=
library(forecast)
dat=log(airmiles)
n=length(dat)
training.dat = dat[1:(n-3)]
test.dat = dat[(n-2):n]
@

This will prepare the training data and set aside the last 3 data points for validation. 

\begin{enumerate}[label=\alph*)]
\item Fit the following four models using \verb@Arima()@: ARIMA(0,0,0), ARIMA(1,0,0), ARIMA(0,0,1), ARIMA(1,0,1).
\item Use \verb@forecast()@ to make 3 step ahead forecasts from each.
\item Calculate the MASE statistic for each using the \verb@accuracy@ function in the forecast package. Type \verb@?accuracy@ to learn how to use this function.
\item Present the results in a table.
\item Which model is best supported based on the MASE statistic?
\end{enumerate}


\item\label{hw-movement} The WhaleNet Archive of STOP Data has movement data on loggerhead turtles on the east coast of the US from ARGOS tags.  The MARSS package \verb@loggerheadNoisy@ dataset is lat/lot data on eight individuals, however we have corrupted this data severely by adding random errors in order to create a ``bad tag'' problem (very noisy).  Use \verb@head(loggerheadNoisy)@ to get an idea of the data.  Then load the data on one turtle, MaryLee.  MARSS needs time across the columns to you need to use transpose the data (as shown).
<<r hw-marylee>>=
turtlename="MaryLee"
dat = loggerheadNoisy[which(loggerheadNoisy$turtle==turtlename),5:6]
dat = t(dat) 
@

\begin{enumerate}[label=\alph*)]
\item Plot MaryLee's locations (as a line not dots).  Put the latitude locations on the y-axis and the longitude on the y-axis. You can use \verb@rownames(dat)@ to see which is in which row. You can just use \verb@plot()@ for the homework. But if you want, you can look at the MARSS Manual chapter on animal movement to see how to plot the turtle locations on a map using the \verb@maps@ package.
\item Analyze the data with a state-space model (movement observed with error) using
<<r hw-movement-fit1, results=hide>>=
fit0 = MARSS(dat)
@
Look at the output from the above MARSS call.  What is the meaning of the parameters output from MARSS in terms of turtle movement? What exactly is the $u$ estimate for example?  Look at the data and think about the model you fit.
\item What assumption did the default MARSS model make about observation error and process error? What does that assumption mean in terms of how steps in the N-S and E-W directions are related?  What does that assumption mean in terms of our assumption about the latitudal and longitudinal observation errors?
\item Does MaryLee move faster in the latitude direction versus longitude direction?
\item Add MaryLee's estimated "true" positions to your plot of her locations. You can use \verb@lines(x, y, col="red")@ (with x and y replaced with your x and y data). The true position is the "state".  This is in the states element of an output from MARSS \verb@fit0$states@.
\item Compare the following models for these data.  Movement in the lat/lon direction is  (1) independent but the variance is the same, (2) is correlated and lat/lon variances are different, and (3) is correlated and the lat/lon variances are the same.  You only need to change Q specification.  Your MARSS call will now look like with \verb@...@ replaced with your Q specification.
<<r hw-movement-model-compare, eval=FALSE>>=
fit1 = MARSS(dat, list(Q=...))
@
\item Plot your state residuals (true location residuals).  What are the problems? Discuss in reference to your plot of the location data.  Here is how to get state residuals from MARSS:
<<r hw-movement-resids, eval=FALSE>>=
resids = residuals(fit0)$state.residuals
@
The lon residuals are in row 1 and lat residuals are in row 2 (same order as the data).
\end{enumerate}


\end{hwenumerate}


<<Reset, echo=FALSE>>=
options(prompt="> ", continue="+ ")
options(width=120)
@