\SweaveOpts{keep.source=TRUE, prefix.string=../figures/Covar-, eps=FALSE, split=FALSE}
<<RUNFIRST, echo=FALSE, include.source=FALSE>>=
require(MARSS)
options(prompt=" ", continue=" ", width=60)
@
\chapter{Fitting multivariate state-space models with covariates}
\label{chap:covariates}
\chaptermark{MARSS with covariates}

A MARSS model with covariate effects in both the process and observation components is written as:
\begin{equation}\label{eqn:covars}
\begin{gathered}
\xx_t = \BB_t\xx_{t-1} + \uu_t + \CC_t\cc_t + \ww_t, \text{ where } \ww_t \sim \MVN(0,\QQ_t) \\
\yy_t = \ZZ_t\xx_t + \aa_t + \DD_t\dd_t + \vv_t, \text{ where } \vv_t \sim \MVN(0,\RR_t) 
\end{gathered}
\end{equation}
where $\cc_t$ is the $p \times 1$ vector of covariates (e.g., temperature, rainfall) which affect the states and $\dd_t$ is a $q \times 1$ vector of covariates (potentially the same as $\cc_t$), which affect the observations.   $\CC_t$ is an $m \times p$ matrix of coefficients relating the effects of $\cc_t$ to the $m \times 1$ state vector $\xx_t$, and $\DD_t$ is an $n \times q$ matrix of coefficients relating the effects of $\dd_t$ to the $n \times 1$ observation vector $\yy_t$.

With the \verb@MARSS()@ function, one can fit this model by passing in \verb@model$c@ and/or \verb@model$d@ in the \verb@model@ argument as a $p \times T$ or $q \times T$ matrix, respectively.  The form for $\CC_t$ and $\DD_t$ is similarly specified by passing in \verb@model$C@ and/or \verb@model$D@.   $\CC$ and $\DD$ are matrices and are specified as 2-dimensional matrices as you would other parameter matrices.

\section{Examples using plankton data}
Here we show some examples using the Lake Washington plankton data set and covariates in that dataset.  We use the 10 years of data from 1965-1974 (Figure \ref{fig:plank-plot}), a decade with particularly high green and bluegreen algae levels. We use the transformed plankton dataset which has 0s replaced with NAs. Below, we set up the data and z-score the data. The original data were already z-scored, but  we changed the mean when we subsampled the years so need to z-score again. 
<<Covar_sec2_1_load-plankton-data, eval=TRUE>>=
fulldat = lakeWAplanktonTrans
years = fulldat[,"Year"]>=1965 & fulldat[,"Year"]<1975
dat = t(fulldat[years,c("Greens", "Bluegreens")])
the.mean = apply(dat,1,mean,na.rm=TRUE)
the.sigma = sqrt(apply(dat,1,var,na.rm=TRUE))
dat = (dat-the.mean)*(1/the.sigma)
@
Next we set up the covariate data, temperature and total phosphorous. We z-score the covariates to standardize and remove the mean.
<<Covar_sec2_2_z-score-covar-data, eval=TRUE, keep.source=TRUE>>=
covariates = rbind(
   Temp = fulldat[years,"Temp"],
   TP = fulldat[years,"TP"])
   
# z.score the covariates
the.mean = apply(covariates,1,mean,na.rm=TRUE)
the.sigma = sqrt(apply(covariates,1,var,na.rm=TRUE))
covariates = (covariates-the.mean)*(1/the.sigma)
@
%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
\setkeys{Gin}{}
\begin{figure}[htp]
\begin{center}
<<Covar_sec2_3_plot-dat, fig=TRUE, echo=FALSE>>=
LWA <- ts(cbind(Year=fulldat[years,"Year"], t(dat), t(covariates)), start=c(1965,1), end=c(1974,12), freq=12)
plot.ts(LWA[,c("Greens","Bluegreens", "Temp", "TP")], main="", yax.flip=TRUE)
@
\end{center}
\caption{Time series of Green and Bluegreen algae abundances in Lake Washington along with the temperature and total phosporous covariates.}
\label{fig:plank-plot}
\end{figure}

\section{Observation-error only model}

We can estimate the effect of the covariates using a process-error only model, an observation-error only model, or a model with both types of error.  An observation-error only model is a multivariate regression, and we will start here so you see the relationship of MARSS model to more familiar linear regression models.

In a standard multivariate linear regression, we only have an observation model with independent errors (\emph{i.e.}, the state process does not appear in the model):
\begin{equation}
\begin{gathered}
\yy_t = \aa + \DD\dd_t + \vv_t, \text{ where } \vv_t \sim \MVN(0,\RR) 
\end{gathered}
\end{equation}
The elements in $\aa$ are the intercepts and those in $\DD$ are the slopes (effects).  We have dropped the $t$ subscript on $\aa$ and $\DD$ because these will be modeled as time-constant.  Writing this out for the two plankton and the two covariates we get:
%~~~~~~~~~~~~~~~~~~~~~~~~~
\begin{equation}
\begin{split}
 \begin{bmatrix}
    y_{g} \\
    y_{bg} \end{bmatrix}_t &=
\begin{bmatrix}
    a_1 \\
    a_2 \end{bmatrix} +
 \begin{bmatrix}
    \beta_{\mathrm{g,temp}}&\beta_{\mathrm{g,tp}} \\
    \beta_{\mathrm{bg,temp}}&\beta_{\mathrm{bg,tp}}  \end{bmatrix} 
 \begin{bmatrix}
    \mathrm{temp} \\
    \mathrm{tp} \end{bmatrix}_{t-1} +
 \begin{bmatrix}
    v_{1} \\
    v_{2} \end{bmatrix}_t 
\end{split}   
\label{eq:dfa1}\end{equation}

Let's fit this model with MARSS.  The $\xx$ part of the model is irrelevant so we want to fix the parameters in that part of the model.  We won't set $\BB=0$ or $\ZZ=0$ since that might cause numerical issues for the Kalman filter. Instead we fix them as identity matrices and fix $\xx_0=0$ so that $\xx_t=0$ for all $t$.
<<Covar_sec3_1_covar-model-0, eval=TRUE, keep.source=TRUE>>=
Q = U = x0 = "zero"; B = Z = "identity"
d = covariates
A = "zero"
D = "unconstrained"
y = dat # to show relationship between dat & the equation
model.list = list(B=B,U=U,Q=Q,Z=Z,A=A,D=D,d=d,x0=x0)
kem = MARSS(y, model=model.list)
@
We set \verb@A="zero"@ because the data and covariates have been demeaned.   Of course, one can do multiple regression in \R using, say, \verb@lm()@, and that would be much, much faster.  The EM algorithm is over-kill here, but it is shown so that you see how a standard multivariate linear regression model is written as a MARSS model in matrix form.


\section{Process-error only model}
Now let's model the data as an autoregressive process observed without error, and incorporate the  covariates into the process model.  Note that this is much different from typical linear regression models. The $\xx$ part represents our model of the data (in this case plankton species).  How is this different from the autoregressive observation errors? Well, we are modeling our data as autoregressive so data at $t-1$ affects the data at $t$.  Population abundances are inherently autoregressive so this model is a bit closer to the underlying mechanism generating the data.  Here is our new process model for plankton abundance.
\begin{equation}
\begin{gathered}
\xx_t = \xx_{t-1} +  \CC\cc_t + \ww_t, \text{ where } \ww_t \sim \MVN(0,\QQ) 
\end{gathered}
\end{equation}
We can fit this as follows:
<<Covar_sec4_1_covar-model-1, eval=TRUE, keep.source=TRUE>>=
R = A = U = "zero"; B = Z = "identity"
Q = "equalvarcov"
C = "unconstrained"
model.list = list(B=B,U=U,Q=Q,Z=Z,A=A,R=R,C=C,c=covariates)
kem = MARSS(dat, model=model.list)
@
Now, it looks like temperature has a strong negative effect on algae?  Also our log-likelihood dropped a lot.  Well, the data do not look at all like a random walk model (\emph{i.e.}, where $\BB=1$), which we can see from the plot of the data (Figure \ref{fig:plank-plot}).  The data are fluctuating about some mean so let's switch to a better autoregressive model---a mean-reverting model.  To do this, we will allow the diagonal elements of $\BB$ to be something other than 1.
<<Covar_sec4_2_covar-model-1c, eval=TRUE>>=
model.list$B = "diagonal and unequal"
kem = MARSS(dat, model=model.list)
@
Notice that the log-likelihood goes up quite a bit, which means that the mean-reverting model fits the data much better.

With this model,  we are estimating $\xx_0$.  If we set \verb@model$tinitx=1@, we will get a error message that $\RR$ diagonals are equal to 0 and we need to fix \verb@x0@.  Because $\RR=0$, if we set the initial states at $t=1$, then they are fully determined by the data.
<<Covar_sec4_3_covar-model-2, eval=TRUE, keep.source=TRUE>>=
x0 = dat[,1,drop=FALSE]
model.list$tinitx = 1
model.list$x0 = x0
kem = MARSS(dat, model=model.list)
@


\section{Both process- and observation-error}

Here is an example where we have both process and observation error but the covariates only affect the process:
\begin{equation}
\begin{gathered}
\xx_t = \BB\xx_{t-1} +  \CC_t\cc_t + \ww_t, \text{ where } \ww_t \sim \MVN(0,\QQ)\\ 
\yy_t = \xx_{t-1} +   \vv_t, \text{ where } \vv_t \sim \MVN(0,\RR), 
\end{gathered}
\end{equation}
$\xx$ is the true algae abundances and $\yy$ is the observation of the $\xx$'s.

Let's say we knew that the observation variance on the algae measurements was about 0.16 and we wanted to include that known value in the model.  To do that, we can simply add $\RR$ to the model list from the process-error only model in the last example.
<<Covar_sec5_1_covar-model-5, eval=TRUE>>=
D = d = A = U = "zero"; Z = "identity"
B = "diagonal and unequal"
Q = "equalvarcov"
C = "unconstrained"
c=covariates
R = diag(0.16,2)
x0 = "unequal"
tinitx=1
model.list = list(B=B,U=U,Q=Q,Z=Z,A=A,R=R,D=D,d=d,C=C,c=c,x0=x0,tinitx=tinitx)
kem = MARSS(dat, model=model.list)
@
Note, our estimates of the effect of temperature and total phosphorous are not that different than what you get from a simple multiple regression (our first example).  This might be because the autoregressive component is small, meaning the estimated diagonals on the $\BB$ matrix are small.

Here is an example where we have both process and observation error but the covariates only affect the observation process:
\begin{equation}
\begin{gathered}
\xx_t = \BB\xx_{t-1}  + \ww_t, \text{ where } \ww_t \sim \MVN(0,\QQ)\\ 
\yy_t = \xx_{t-1} + \DD\dd_t  \vv_t, \text{ where } \vv_t \sim \MVN(0,\RR), 
\end{gathered}
\end{equation}
$\xx$ is the true algae abundances and $\yy$ is the observation of the $\xx$'s.

<<Covar_sec5_1_covar-model-6, eval=TRUE, keep.source=TRUE>>=
C = c = A = U = "zero"; Z = "identity"
B = "diagonal and unequal"
Q = "equalvarcov"
D = "unconstrained"
d=covariates
R = diag(0.16,2)
x0 = "unequal"
tinitx=1
model.list = list(B=B,U=U,Q=Q,Z=Z,A=A,R=R,D=D,d=d,C=C,c=c,x0=x0,tinitx=tinitx)
kem = MARSS(dat, model=model.list)
@

\section{Including seasonal effects in MARSS models}
\label{chap:covariates:season}\index{seasonality}
Time-series data are often collected at intervals with some implicit ``seasonality.'' For example, quarterly earnings for a business, monthly rainfall totals, or hourly air temperatures. In those cases, it is often helpful to extract any recurring seasonal patterns that might otherwise mask some of the other temporal dynamics we are interested in examining.

Here we show a few approaches for including seasonal effects using the Lake Washington plankton data, which were collected monthly.  The following examples will use all five phytoplankton species from Lake Washington.  First, let's set up the data.
<<Covar_sec6_01_set-up-seasonal-dat, keep.source=TRUE>>=
years = fulldat[,"Year"]>=1965 & fulldat[,"Year"]<1975
phytos = c("Diatoms", "Greens", "Bluegreens",
           "Unicells", "Other.algae")
dat = t(fulldat[years,phytos])

# z.score data because we changed the mean when we subsampled
the.mean = apply(dat,1,mean,na.rm=TRUE)
the.sigma = sqrt(apply(dat,1,var,na.rm=TRUE))
dat = (dat-the.mean)*(1/the.sigma)
# number of time periods/samples
TT = dim(dat)[2]
@


\subsection{Seasonal effects as fixed factors}

One common approach for estimating seasonal effects is to treat each one as a fixed factor, such that the number of parameters equals the number of ``seasons'' (\emph{e.g.}, 24 hours per day, 4 quarters per year). The plankton data are collected monthly, so we will treat each month as a fixed factor.  To fit a model with fixed month effects, we create a 12 $\times$ \emph{T} covariate matrix $\cc$ with one row for each month (Jan, Feb, ...) and one column for each time point. We put a 1 in the January row for each column corresponding to a January time point, a 1 in the February row for each column corresponding to a February time point, and so on. All other values of $\cc$ equal 0. The following code will create such a $\cc$ matrix.
<<Covar_sec6_02_set-up-month-factors>>=
# number of "seasons" (e.g., 12 months per year)
period = 12
# first "season" (e.g., Jan = 1, July = 7)
per.1st = 1
# create factors for seasons
c.in = diag(period)
for(i in 2:(ceiling(TT/period))) {c.in = cbind(c.in,diag(period))}
# trim c.in to correct start & length
c.in = c.in[,(1:TT)+(per.1st-1)]
# better row names
rownames(c.in) = month.abb
@

Next we need to set up the form of the $\CC$ matrix which defines any constraints we want to set on the month effects.  $\CC$ is a $5 \times 12$ matrix. Five taxon and 12 month effects. 
If we wanted each taxon to have the same month effect, i.e. there is a common month effect across all taxon, then 
we have the same value in each $\CC$ column\footnote{\texttt{month.abb} is a R constant that gives month abbreviations in text.}:
<<Covar_sec6_03_C-constrained>>=
C = matrix(month.abb,5,12,byrow=TRUE)
C
@
Notice, that $\CC$ only has 12 values in it, the 12 common month effects.
However, for this example, we will let each taxon have a different month effect thus allowing different seasonality for each taxon.  For this model, we want each value in $\CC$ to be unique:
<<Covar_sec6_04_C-constrained2>>=
C = "unconstrained"
@
Now $\CC$ has 5 $\times$ 12 = 60 separate effects.

Then we set up the form for the rest of the model parameters.  We make the following assumptions:
<<Covar_sec6_05_month-factor-marss-params, keep.source=TRUE>>=
# Each taxon has unique density-dependence
B = "diagonal and unequal"
# Assume independent process errors
Q = "diagonal and unequal"
# We have demeaned the data & are fitting a mean-reverting model
# by estimating a diagonal B, thus
U = "zero"
# Each obs time series is associated with only one process
Z = "identity" 
# The data are demeaned & fluctuate around a mean
A = "zero" 
# We assume observation errors are independent, but they
# have similar variance due to similar collection methods
R = "diagonal and equal"
# We are not including covariate effects in the obs equation
D = "zero"
d = "zero"
@

Now we can set up the model list for MARSS and fit the model (results are not shown since they are verbose with 60 different month effects).
<<Covar_sec6_06_fit-month-factor-with-MARSS, results=hide, keep.source=TRUE>>=
model.list = list(B=B,U=U,Q=Q,Z=Z,A=A,R=R,C=C,c=c.in,D=D,d=d)
seas.mod.1 = MARSS(dat,model=model.list,control=list(maxit=1500))

# Get the estimated seasonal effects
# rows are taxa, cols are seasonal effects
seas.1 = coef(seas.mod.1,type="matrix")$C
rownames(seas.1) = phytos
colnames(seas.1) = month.abb
@

The top panel in Figure \ref{fig:mon-effects} shows the estimated seasonal effects for this model.  Note that if we had set U="unequal", we would need to set one of the columns of $\CC$ to zero because the model would be under-determined (infinite number of solutions). If we substracted the mean January abundance off each time series, we could set the January column in $\CC$ to 0 and get rid of 5 estimated effects.

\subsection{Seasonal effects as a polynomial}

The fixed factor approach required estimating 60 effects.  Another approach is to model the month effect as a 3$^\emph{rd}$-order (or higher) polynomial: $a+b\times m + c\times m^2 + d \times m^3$ where $m$ is the month number. This approach has less flexibility but requires only 20 estimated parameters (\emph{i.e.}, 4 regression parameters times 5 taxa).  To do so, we create a 4 $\times$ \emph{T} covariate matrix $\cc$ with the rows corresponding to 1, $m$, $m^2$, and $m^3$, and the columns again corresponding to the time points.  Here is how to set up this matrix:

<<Covar_sec6_07_poly-month-factor, keep.source=TRUE, results=hide>>=
# number of "seasons" (e.g., 12 months per year)
period = 12
# first "season" (e.g., Jan = 1, July = 7)
per.1st = 1
# order of polynomial
poly.order = 3
# create polynomials of months
month.cov = matrix(1,1,period)
for(i in 1:poly.order) {month.cov = rbind(month.cov,(1:12)^i)}
# our c matrix is month.cov replicated once for each year
c.m.poly = matrix(month.cov, poly.order+1, TT+period, byrow=FALSE)
# trim c.in to correct start & length
c.m.poly = c.m.poly[,(1:TT)+(per.1st-1)]

# Everything else remains the same as in the previous example
model.list = list(B=B,U=U,Q=Q,Z=Z,A=A,R=R,C=C,c=c.m.poly,D=D,d=d)
seas.mod.2 = MARSS(dat, model=model.list, control=list(maxit=1500))
@
The effect of month $m$ for taxon $i$ is $a_i + b_i \times m + c_i \times m^2 + d_i \times m^3$, where $a_i$, $b_i$, $c_i$ and $d_i$ are in the $i$-th row of $\CC$.  We can now calculate the matrix of seasonal effects as follows, where each row is a taxon and each column is a month:
<<Covar_sec6_08_seasonal-effect-poly, keep.source=TRUE>>=
C.2 = coef(seas.mod.2,type="matrix")$C
seas.2 = C.2 %*% month.cov
rownames(seas.2) = phytos
colnames(seas.2) = month.abb
@
The middle panel in Figure \ref{fig:mon-effects} shows the estimated seasonal effects for this polynomial model.

\subsection{Seasonal effects as a Fourier series}

The factor approach required estimating 60 effects, and the 3rd order polynomial model was an improvement at only 20 parameters. A third option is to use a discrete Fourier series, which is combination of sine and cosine waves; it would require only 10 parameters. Specifically, the effect of month $m$ on taxon $i$ is $a_i \times \cos(2 \pi m/p) + b_i \times \sin(2 \pi m/p)$, where $p$ is the period (\emph{e.g.}, 12 months, 4 quarters), and $a_i$ and $b_i$ are contained in the $i$-th row of $\CC$.

We begin by defining the 2 $\times$ \emph{T} seasonal covariate matrix $\cc$ as a combination of 1 cosine and 1 sine wave:
<<Covar_sec6_09_seasonal-fourier>>=
cos.t = cos(2 * pi * seq(TT) / period)
sin.t = sin(2 * pi * seq(TT) / period)
c.Four = rbind(cos.t,sin.t)
@

Everything else remains the same and we can fit this model as follows:
<<Covar_sec6_10_seasonal-fourier-fit, results=hide>>=
model.list = list(B=B,U=U,Q=Q,Z=Z,A=A,R=R,C=C,c=c.Four,D=D,d=d)
seas.mod.3 = MARSS(dat, model=model.list, control=list(maxit=1500))
@

We make our seasonal effect matrix as follows:
<<Covar_sec6_11_seasonal-effects-fourier, keep.source=TRUE>>=
C.3 = coef(seas.mod.3, type="matrix")$C
# The time series of net seasonal effects
seas.3 = C.3 %*% c.Four[,1:period]
rownames(seas.3) = phytos
colnames(seas.3) = month.abb
@
The bottom panel in Figure \ref{fig:mon-effects} shows the estimated seasonal effects for this seasonal-effects model based on a discrete Fourier series.

%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
\setkeys{Gin}{}
\begin{figure}[htp]
\begin{center}
<<Covar_sec6_12_plot-seas-effects, echo=FALSE, fig=TRUE>>=
par(mfrow=c(3,1), mar=c(2,4,2,2)) 
matplot(t(seas.1),type="l",bty="n",xaxt="n", ylab="Fixed monthly", col=1:5)
axis(1,labels=month.abb, at=1:12,las=2,cex.axis=0.75)
legend("topright", lty=1:5, legend=phytos, cex=0.6, col=1:5)

matplot(t(seas.2),type="l",bty="n",xaxt="n", ylab="Cubic", col=1:5)
axis(1,labels=month.abb, at=1:12,las=2,cex.axis=0.75)
legend("topright", lty=1:5, legend=phytos, cex=0.6, col=1:5)

matplot(t(seas.3),type="l",bty="n",xaxt="n",ylab="Fourier", col=1:5)
axis(1,labels=month.abb, at=1:12,las=2,cex.axis=0.75)
legend("topright", lty=1:5, legend=phytos, cex=0.6, col=1:5)
@
\end{center}
\caption{Estimated monthly effects for the three approaches to estimating seasonal effects. Top panel: each month modelled as a separate fixed effect for each taxon (60 parameters); Middle panel: monthly effects modelled as a 3rd order polynomial (20 parameters); Bottom panel: monthly effects modelled as a discrete Fourier series (10 parameters). }
\label{fig:mon-effects}
\end{figure}

Rather than rely on our eyes to judge model fits, we should formally assess which of the 3 approaches offers the most parsimonious fit to the data. Here is a table of AICc values for the 3 models:
<<Covar_sec6_13_show-aics>>=
data.frame(Model=c("Fixed", "Cubic", "Fourier"),
           AICc=round(c(seas.mod.1$AICc,
                        seas.mod.2$AICc,
                        seas.mod.3$AICc),1))
@
The model selection results indicate that the model with monthly seasonal effects estimated via the discrete Fourier sequence is the best of the 3 models. Its AICc value is much lower than either the polynomial or fixed-effects models.

\section{Model diagnostics}
We will examine some basic model diagnostics for these three approaches by looking at plots of the model residuals and their autocorrelation functions (ACFs) for all five taxa using the following code:

<<Covar_sec7_01_diagnostic-code, eval=FALSE>>=
for(i in 1:3) {
  dev.new()
  modn = paste("seas.mod",i,sep=".")
  for(j in 1:5) {
    plot.ts(residuals(get(modn))$model.residuals[j,], 
      ylab="Residual", main=phytos[j])
    abline(h=0, lty="dashed")
    acf(residuals(get(modn))$model.residuals[j,])
    }
  }
@

%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
\setkeys{Gin}{}
\begin{figure}[htp]
\begin{center}
<<Covar_sec7_01_diagnostic-fig, fig=TRUE>>=
  i = 3; #Fourier
  j = 1; #First state
  par(mfrow=c(2,1))
  modn = paste("seas.mod",i,sep=".")
  plot.ts(residuals(get(modn))$model.residuals[j,], 
      ylab="Residual", main=phytos[j])
  abline(h=0, lty="dashed")
  acf(residuals(get(modn))$model.residuals[j,])
@
\end{center}
\caption{Residuals for model with season modelled as a discrete Fourier series. }
\label{fig:mon-effects-diagnostic}
\end{figure}

<<reset, echo=FALSE>>=
options(prompt="> ", continue=" +", width=120)
@
